@using System.Text.Json
@using SdWP.DTO.Requests
@using SdWP.DTO.Responses
@using SdWP.Service.IServices
@inject IUserRegisterService UserRegisterService
@inject NavigationManager Navigation
@inject HttpClient HttpClient

@if (Show)
{
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @((isSuccess ? "alert-success" : "alert-danger"))" role="alert">
            @message
        </div>
    }

    <section class="py-3 py-md-5">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                    <div class="card border border-light-subtle rounded-3 ">
                        <div class="card-body p-3 p-md-4 p-xl-5">
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                            </div>
                            <div class="text-center mb-3">
                            </div>
                            <h2 class="fs-6 fw-normal text-center text-secondary mb-4">Create acount</h2>
                            <EditForm Model="register" OnValidSubmit="HandleRegister">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger mb-3" />
                                <div class="row gy-2 overflow-hidden">
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="register.Name" class="form-control" name="name" id="name" placeholder="John" required />
                                            <label for="name" class="form-label">Name</label>
                                            <ValidationMessage For="@(() => register.Name)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="register.Email" class="form-control" name="email" id="email" placeholder="john@doe.com" required />
                                            <label for="email" class="form-label">Email</label>
                                            <ValidationMessage For="@(() => register.Email)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="register.Password" class="form-control" type="password" placeholder="password123" required />
                                            <label for="password" class="form-label">Password</label>
                                            <ValidationMessage For="@(() => register.Password)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="register.ConfirmPassword" class="form-control" type="password" placeholder="password123" required />
                                            <label for="password" class="form-label">Confirm Password</label>
                                            <ValidationMessage For="@(() => register.ConfirmPassword)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="d-grid my-3">
                                            <button class="btn btn-primary btn-lg" type="submit" disabled="@isSubmitting">
                                                @if (isSubmitting)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                    <span>Creating account...</span>
                                                }
                                                else
                                                {
                                                    <span>Create Account</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}


@code
{
    [Parameter]
    public bool Show { get; set; } = false;
    [Parameter]
    public EventCallback OnClose { get; set; }

    private UserRegisterRequestDTO register = new();
    private string message = string.Empty;
    private bool isSuccess = false;
    private bool isSubmitting = false;

    private bool showModal = false;

    private async Task HandleRegister()
    {
        try
        {
            isSubmitting = true;
            message = string.Empty;
            StateHasChanged();

            var response = await HttpClient.PostAsJsonAsync("api/register", register);

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var data = JsonSerializer.Deserialize<UserRegisterResponseDTO>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    message = "Account created successfully!";
                    isSuccess = true;
                }
                catch (JsonException)
                {
                    message = $"Invalid JSON response: {responseContent}";
                    isSuccess = false;
                }
            }
            else
            {
                message = "Registration failed. Please try again.";
                isSuccess = false;
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            message = $"An error occurred: {e.Message}";
            isSuccess = false;
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    private void CloseModal()
    {
        Show = false;
        OnClose.InvokeAsync();
    }

    private class ErrorResponse
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public List<string>? Errors { get; set; }
    }
}