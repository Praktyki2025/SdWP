@using System.Net.Http.Json
@using System.Text.Json;
@using Microsoft.AspNetCore.Authorization
@using SdWP.DTO.Responses
@using SdWP.DTO.Requests
@using BlazorBootstrap
@using Serilog

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@page "/admin/users-list"
@attribute [Authorize(Roles = "Admin")]

<h3>AllUsersList</h3>

<button @onclick="ShowRegisterModal" class="btn btn-primary">Register new user</button>
<br>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

@if (users == null)
{
    <div class="alert alert-info" role="alert">
        Loading...
    </div>
}
else if (users.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        No users found
    </div>
}
else
{
    <table id="userTable" class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Created at</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        @if (user.Roles != null && user.Roles.Count > 0)
                        {
                            @string.Join(", ", user.Roles)
                        }
                        else
                        {
                            @("No roles")
                        }
                    </td>
                    <td>@user.CreatedAt?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-cog"></i> Actions
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item" @onclick="() => ShowEditModal(user)">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </a>
                                </li>
                                @if (user.Roles != null && user.Roles.Contains("User"))
                                {
                                    <li>
                                        <a class="dropdown-item text-danger" @onclick="() => OnShowDeleteModalClick(user.Id)">
                                            <i class="fas fa-trash-alt me-2"></i>Delete
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@*delete modal*@
<Modal @ref="deleteModal" title="Delete user" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        Are you sure you want to delete this user? <br>
        <strong class="text-danger">This action cannot be undone.</strong>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideDeleteModalClick">Close</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnDeleteUserClick">Understood</Button>
    </FooterTemplate>
</Modal>


@*register modal*@
<Modal @ref="registerModal">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(registerMessage))
        {
            <div class="alert @((isRegisterSuccess ? "alert-success" : "alert-danger"))" role="alert">
                @registerMessage
            </div>
        }
        <EditForm Model="register" OnValidSubmit="HandleRegister">
            <ValidationSummary class="text-danger mb-3" />
            <div class="row gy-2 overflow-hidden">
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="register.Name" class="form-control" name="name" id="name" placeholder="John" required />
                        <label for="name" class="form-label">Name</label>
                        <ValidationMessage For="@(() => register.Name)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="register.Email" class="form-control" name="email" id="email" placeholder="john@doe.com" required />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="@(() => register.Email)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="register.Password" class="form-control" type="password" placeholder="password123" required />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="@(() => register.Password)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="register.ConfirmPassword" class="form-control" type="password" placeholder="password123" required />
                        <label for="password" class="form-label">Confirm Password</label>
                        <ValidationMessage For="@(() => register.ConfirmPassword)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="register.Role" class="form-select" required>
                            <option value="">Select Role</option>
                            @foreach (var role in availableRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="role" class="form-label">Role</label>
                        <ValidationMessage For="@(() => register.Role)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="d-grid my-3">
                        <button class="btn btn-primary btn-lg" type="submit" disabled="@isRegisterSubmitting">
                            @if (isRegisterSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Creating account...</span>
                            }
                            else
                            {
                                <span>Create Account</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>


@*edit modal*@
<Modal @ref="editModal">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(editMessage))
        {
            <div class="alert @((isEditSuccess ? "alert-success" : "alert-danger"))" role="alert">
                @editMessage
            </div>
        }
        <EditForm Model="editUser" OnValidSubmit="HandleEditUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />
            <div class="row gy-2 overflow-hidden">
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editUser.Name" class="form-control" name="name" id="name" placeholder="John" />
                        <label for="editName" class="form-label">Name</label>
                        <ValidationMessage For="@(() => editUser.Name)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editUser.Email" class="form-control" name="email" id="email" placeholder="john@doe.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="@(() => editUser.Email)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editUser.Password" class="form-control" type="password" placeholder="password123" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="@(() => editUser.Password)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editUser.ConfirmPassword" class="form-control" type="password" placeholder="password123" />
                        <label for="password" class="form-label">Confirm Password</label>
                        <ValidationMessage For="@(() => editUser.ConfirmPassword)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="editUser.Role" class="form-select">
                            <option value="">Select Role</option>
                            @foreach (var role in availableRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="role" class="form-label">Role</label>
                        <ValidationMessage For="@(() => editUser.Role)" class="text-danger" />
                    </div>
                </div>
                <div class="col-12">
                    <div class="d-grid my-3">
                        <button class="btn btn-primary btn-lg" type="submit" disabled="@isEditSubmitting">
                            @if (isEditSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Edit accoutn...</span>
                            }
                            else
                            {
                                <span>Edit Account</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {
    private string message = string.Empty;

    //user list state
    private List<UserListResponseDTO> users = new List<UserListResponseDTO>();

    //delete modal state
    private Modal deleteModal = default!;
    private Guid userIdToDelete = Guid.Empty;

    //register form state
    private bool isRegisterSuccess = false;
    private bool isRegisterSubmitting = false;
    private AddUserRequestDTO register = new();
    private Modal registerModal = default!;
    private string registerMessage = string.Empty;
    private List<string> availableRoles = new();

    //edit form state
    private bool isEditSuccess = false;
    private bool isEditSubmitting = false;
    private EditUserRequestDTO editUser = new();
    private Modal editModal = default!;
    private string editMessage = string.Empty;

    //error helper class
    private class ErrorResponse
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public List<string>? Errors { get; set; }
    }

    //filter and sort state
    private bool _dataTableInitialized = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadUserList();
        LoadAvailableRoles();
    }

    //show user list logic
    private async Task LoadUserList()
    {
        try
        {
            var response = await Http.GetAsync("api/admin/user/list");

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<UserListResponseDTO>>()
                    ?? new();

                if (users.Count == 0) message = "No users found in system";
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    message = errorResponse?.Message ?? "An error occurred while processing your request.";

                    if (errorResponse?.Errors?.Any() == true)
                    {
                        message += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                        Log.Error($"[{DateTime.UtcNow}] Error during user list loading: {message}");
                    }
                }
                catch (Exception e)
                {
                    Log.Error($"[{DateTime.UtcNow}] Error during user list loading: {e.Message}");
                }
            }
        }
        catch (Exception e)
        {
            Log.Error($"[{DateTime.UtcNow}] Error during user list loading: {e.Message}");
        }
    }

    //delete user logic and modal function
    private async Task HandleDeleteUserAsync(Guid id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/admin/user/delete/{id}");
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("dataTableHelper.destroy", "userTable");
                message = "User deleted successfully.";
                await Task.Delay(2000);
                await LoadUserList();
                await RefreshDataTable();
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    message = errorResponse?.Message ?? "An error occurred while processing your request.";

                    if (errorResponse?.Errors?.Any() == true)
                    {
                        message += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                        Log.Error($"[{DateTime.UtcNow}] Error during user deletion: {message}");
                    }
                }
                catch (Exception e)
                {
                    Log.Error($"[{DateTime.UtcNow}] Error during user deletion: {e.Message}");
                }
            }
            RefreshDataTable();
        }
        catch (Exception e)
        {
            Log.Error($"[{DateTime.UtcNow}] Error during user deletion: {e.Message}");
        }
        finally
        {
            await deleteModal.HideAsync();
            await OnInitializedAsync();
        }
    }

    private async Task OnShowDeleteModalClick(Guid id)
    {
        await deleteModal.ShowAsync();
        userIdToDelete = id;
    }

    private async Task OnDeleteUserClick()
    {
        if (userIdToDelete == Guid.Empty)
        {
            message = "No user selected for deletion.";
            return;
        }
        await HandleDeleteUserAsync(userIdToDelete);
    }

    private async Task OnHideDeleteModalClick()
    {
        await deleteModal.HideAsync();
    }

    //register user logic and modal function
    private void LoadAvailableRoles()
    {
        availableRoles = new List<string> { "User", "Admin" };
    }

    private async Task ShowRegisterModal()
    {
        registerMessage = string.Empty;
        register = new AddUserRequestDTO();
        await registerModal.ShowAsync();
    }

    private async Task OnHideRegisterModalClick()
    {
        await deleteModal.HideAsync();
        registerMessage = string.Empty;
    }

    private async Task HandleRegister()
    {
        try
        {
            isRegisterSubmitting = true;
            message = string.Empty;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("api/admin/user/register", register);

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                message = "User created successfully.";
                register = new AddUserRequestDTO();
                await registerModal.HideAsync();
                await JSRuntime.InvokeVoidAsync("dataTableHelper.destroy", "userTable");
                await Task.Delay(2000);
                await LoadUserList();
                await RefreshDataTable();
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    message = errorResponse?.Message ?? "An error occurred while processing your request.";

                    if (errorResponse?.Errors?.Count > 0)
                    {
                        message += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                        Log.Error($"[{DateTime.UtcNow}] Error during user registration: {message}");
                    }

                    isRegisterSuccess = false;
                }
                catch (Exception e)
                {
                    Log.Error($"[{DateTime.UtcNow}] Error during user registration: {e.Message}");
                    isRegisterSuccess = false;
                }
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Log.Error($"[{DateTime.UtcNow}] Error during user registration: {e.Message}");
            isRegisterSuccess = false;
        }
        finally
        {
            StateHasChanged();
            //await RefreshDataTable();
        }
    }

    //edit user logic and modal function
    private async Task ShowEditModal(UserListResponseDTO dto)
    {
        editMessage = string.Empty;
        editUser = new EditUserRequestDTO
        {
            Id = dto.Id,
            Name = dto.Name ?? string.Empty,
            Email = dto.Email ?? string.Empty,
            Password = string.Empty,
            ConfirmPassword = string.Empty,
            Role = dto.Roles?.FirstOrDefault() ?? string.Empty
        };

        await editModal.ShowAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await editModal.HideAsync();
        editMessage = string.Empty;
    }

    private async Task HandleEditUser()
    {
        try
        {
            if (string.IsNullOrEmpty(editUser.Name) &&
            string.IsNullOrEmpty(editUser.Email) &&
            string.IsNullOrEmpty(editUser.Password) &&
            string.IsNullOrEmpty(editUser.Role))
            {
                editMessage = "Pleas fill at least one filed to update.";
                isEditSuccess = false;
                StateHasChanged();
                return;
            }

            if (!string.IsNullOrWhiteSpace(editUser.Password))
            {
                if (editUser.Password.Length < 6)
                {
                    editMessage = "Password must be at least 6 characters long.";
                    isEditSuccess = false;
                    StateHasChanged();
                    return;
                }

                if (editUser.Password != editUser.ConfirmPassword)
                {
                    editMessage = "Passwords do not match.";
                    isEditSuccess = false;
                    StateHasChanged();
                    return;
                }
            }

            isEditSubmitting = true;
            editMessage = string.Empty;
            StateHasChanged();

            var response = await Http.PutAsJsonAsync("api/admin/user/update", editUser);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                editMessage = "User updated successfully.";
                await editModal.HideAsync();
                await Task.Delay(2000);
                await JSRuntime.InvokeVoidAsync("dataTableHelper.destroy", "userTable");
                await LoadUserList();
                await RefreshDataTable();
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    editMessage = errorResponse?.Message ?? "An error occurred while processing your request.";
                    if (errorResponse?.Errors?.Count > 0)
                    {
                        editMessage += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                        Log.Error($"[{DateTime.UtcNow}] Error during user edit: {editMessage}");
                    }
                    isEditSuccess = false;
                }
                catch (Exception e)
                {
                    editMessage = "Update failed. Try again later";
                    isEditSuccess = false;
                }
            }
        }
        catch (Exception e)
        {
            Log.Error($"[{DateTime.UtcNow}] Error during user edit: {e.Message}");
            isEditSuccess = false;
        }
        finally
        {
            isEditSubmitting = false;
            StateHasChanged();
        }
    }

    //function to init datatable

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_dataTableInitialized)
        {
            await RefreshDataTable();
            _dataTableInitialized = true;
        }
    } 

    private async Task RefreshDataTable()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initDataTable.destroy", "userTable");
        }
        catch (Exception e)
        {
            Log.Error($"[{DateTime.UtcNow}] Error during DataTable initialization: {e.Message}");
        }

        await JSRuntime.InvokeVoidAsync("initDataTable.initialize", "userTable");
    }

}