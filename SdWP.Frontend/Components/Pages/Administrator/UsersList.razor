@using System.Net.Http.Json
@using System.Text.Json;
@using Microsoft.AspNetCore.Authorization
@using SdWP.DTO.Responses
@using BlazorBootstrap

@inject HttpClient Http

@page "/admin/users-list"
@attribute [Authorize(Roles = "Admin")]

<h3>AllUsersList</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

@if (users == null)
{
    <div class="alert alert-info" role="alert">
        Loading...
    </div>
}
else if (users.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        No users found
    </div>
}
else
{
    <table id="example" class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Created at</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        @if (user.Roles != null && user.Roles.Count > 0)
                        {
                            @string.Join(", ", user.Roles)
                        }
                        else
                        {
                            @("No roles")
                        }
                    </td>
                    <td>@user.CreatedAt?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-cog"></i> Actions
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item" href="#">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </a>
                                </li>
                                @if (user.Roles != null && user.Roles.Contains("User"))
                                {
                                    <li>
                                        <a class="dropdown-item text-danger" @onclick="() => OnShowDeleteModalClick(user.Id)">
                                            <i class="fas fa-trash-alt me-2"></i>Delete
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="deleteModal" title="Delete user" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        Are you sure you want to delete this user? <br>
        <strong class="text-danger">This action cannot be undone.</strong>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideDeleteModalClick">Close</Button>
        <Button Color="ButtonColor.Danger" @onclick="OnDeleteUserClick">Understood</Button>
    </FooterTemplate>
</Modal>


@code {
    private string message = string.Empty;
    private List<UserListResponseDTO> users = new List<UserListResponseDTO>();
    private Modal deleteModal = default!;
    private Guid userIdToDelete = Guid.Empty;

    private async Task OnShowDeleteModalClick(Guid id)
    {
        await deleteModal.ShowAsync();
        userIdToDelete = id;
    }

    private async Task OnDeleteUserClick()
    {
        if (userIdToDelete == Guid.Empty)
        {
            message = "No user selected for deletion.";
            return;
        }
        await HandleDeleteUserAsync(userIdToDelete);
    }

    private async Task OnHideDeleteModalClick()
    {
        await deleteModal.HideAsync();
    }


    private class ErrorResponse
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public List<string>? Errors { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/admin/user/list");

            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<UserListResponseDTO>>()
                    ?? new();

                if (users.Count == 0) message = "No users found in system";
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    message = errorResponse?.Message ?? "An error occurred while processing your request.";

                    if (errorResponse?.Errors?.Any() == true)
                    {
                        message += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                    }
                }
                catch (Exception e)
                {
                    message = "Registration failed. Try again later";
                }
            }
        }
        catch (Exception e)
        {
            message = "Registration failed. Try again later";
        }
    }

    private async Task HandleDeleteUserAsync(Guid id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/admin/user/delete/{id}");
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                message = "User deleted successfully.";
                Task.Delay(2000);
            }
            else
            {
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    message = errorResponse?.Message ?? "An error occurred while processing your request.";

                    if (errorResponse?.Errors?.Any() == true)
                    {
                        message += "\nDetails: " + string.Join(", ", errorResponse.Errors);
                    }
                }
                catch (Exception e)
                {
                    message = "Deleted user failed. Try again later";
                }
            }
        }
        catch (Exception e)
        {
            message = "An error occurred while deleting the user.";
        }
        finally
        {
            await deleteModal.HideAsync();
            await OnInitializedAsync();
        }
    }
}

