@page "/login"
@rendermode InteractiveServer

@using SdWP.DTO.Requests
@using SdWP.DTO.Responses
@using System.Linq
@using Microsoft.AspNetCore.Antiforgery;
@using Serilog
@using SdWP.Frontend.Enum
@using SdWP.Frontend.Functions

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IAntiforgery Antiforgery
@inject HttpClient Http

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

<section class="py-3 py-md-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                <div class="card border border-light-subtle rounded-3 ">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <h2 class="fs-6 fw-normal text-center text-secondary mb-4">Sign in to your account</h2>
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" formname="loginForm">
                            <div class="row gy-2 overflow-hidden">
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="name@example.com" />
                                        <label for="email">Email</label>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="loginModel.Password" class="form-control" type="password" placeholder="Password" />
                                        <label for="password">Password</label>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="d-grid my-3">
                                        <button class="btn btn-primary btn-lg" type="submit" disabled="@isLoading">
                                            @if (isLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            Log in
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                        <div class="mt-3">
                            <small class="text-muted">
                                Forgot your password? <a href="/remind-password">Reset Password</a>
                            </small>
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                Test accounts:<br />
                                Admin: admin@example.pl / Admin123!<br />
                                User: user@example.pl / User123!
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [Inject]
    public SendLogToDatabase SendLogToDatabase { get; set; }

    private LoginRequest loginModel = new();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            message = string.Empty;

            var result = await JSRuntime.InvokeAsync<LoginResponse>("apiLogin", loginModel);

            if (result != null && result.Success)
            {
                if (result.Roles.Any(r => r.Equals("Admin", StringComparison.OrdinalIgnoreCase)))
                {
                    Navigation.NavigateTo("/admin", forceLoad: true);
                }
                else if (result.Roles.Any(r => r.Equals("User", StringComparison.OrdinalIgnoreCase)))
                {
                    Navigation.NavigateTo("/user", forceLoad: true);
                }
                else
                {
                    Navigation.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                message = result?.Message ?? "Login failed. Please try again.";

                await SendLogToDatabase.SendLogAsync(
                    $"Error during Admin dashboard {message}",
                    "Unknow",
                    "Client/Login/HandleLogin",
                    TypeOfLog.Error);

                isLoading = false;
            }
        }
        catch (Exception e)
        {
            await SendLogToDatabase.SendLogAsync(
                $"Error during login: {e.Message}",
                e.StackTrace ?? "Unknow",
                e.Source ?? "Client/Login/HandleLogin",
                TypeOfLog.Error);

            isLoading = false;
        }
    }
}