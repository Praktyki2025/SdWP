@using SdWP.DTO.Requests
@using SdWP.DTO.Responses
@using SdWP.Service.IServices
@inject IUserRegisterService UserRegisterService
@inject NavigationManager Navigation


@page "/register"
@rendermode InteractiveServer

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @((isSuccess ? "alert-success" : "alert-danger"))" role="alert">
        @message
    </div>
}
)

<section class="py-3 py-md-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                <div class="card border border-light-subtle rounded-3 ">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <div class="text-center mb-3">
                        </div>
                        <h2 class="fs-6 fw-normal text-center text-secondary mb-4">Create acount</h2>
                        <EditForm Model="register" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            <div class="row gy-2 overflow-hidden">
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="register.Name" class="form-control" name="name" id="name" placeholder="John" required />
                                        <label for="name" class="form-label">Name</label>
                                        <ValidationMessage For="@(() => register.Name)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="register.Email" class="form-control" name="email" id="email" placeholder="john@doe.com" required />
                                        <label for="email" class="form-label">Email</label>
                                        <ValidationMessage For="@(() => register.Email)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="register.Password" class="form-control" type="password" placeholder="password123" required />
                                        <label for="password" class="form-label">Password</label>
                                        <ValidationMessage For="@(() => register.Password)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="register.ConfirmPassword" class="form-control" type="password" placeholder="password123" required />
                                        <label for="password" class="form-label">Confirm Password</label>
                                        <ValidationMessage For="@(() => register.ConfirmPassword)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="d-grid my-3">
                                        <button class="btn btn-primary btn-lg" type="submit" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Creating account...</span>
                                            }
                                            else
                                            {
                                                <span>Create Account</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <p class="m-0 text-secondary text-center">
                                        Already have an account? <a href="/login" class="link-primary text-decoration-none">Sign in</a>
                                    </p>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private UserRegisterRequestDTO register = new();
    private string message = string.Empty;
    private bool isSuccess = false;
    private bool isSubmitting = false;

    private async Task HandleRegister()
    {
        try
        {
            isSubmitting = true;
            message = string.Empty;
            StateHasChanged();

            var response = await UserRegisterService.RegisterAsync(register);

            if (response != null && response.Success)
            {
                message = response.Message ?? "Registration successful!";
                isSuccess = true;
                StateHasChanged();

                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                message = response?.Message ?? "Registration failed. Please try again.";
                isSuccess = false;
            }
        }
        catch (Exception e)
        {
            message = $"An error occurred: {e.Message}";
            isSuccess = false;
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
