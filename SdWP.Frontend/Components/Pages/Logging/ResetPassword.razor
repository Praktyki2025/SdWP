@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Web;
@using Serilog
@using SdWP.Frontend.Enum
@using SdWP.Frontend.Functions

@inject HttpClient Http
@inject NavigationManager Nav

@page "/reset-password"

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(message.Contains("Error") ? "alert-danger" : "alert-success")" role="alert">
        @message
    </div>
}

else if (isLoaded)
{
    <section class="py-3 py-md-5">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                    <div class="card border border-light-subtle rounded-3 ">
                        <div class="card-body p-3 p-md-4 p-xl-5">
                            <h2 class="fs-6 fw-normal text-center text-secondary mb-4">Reset Your Password</h2>
                            <EditForm Model="model" OnValidSubmit="HandleResetPassword" formname="resetPasswordForm">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row gy-2 overflow-hidden">
                                    <div class="form-floating mb-3">
                                        <InputText id="password" @bind-Value="model.Password" class="form-control" type="password" placeholder="Password" />
                                        <label for="password">New Password</label>
                                        <ValidationMessage For="@(() => model.Password)" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText id="confirmPassword" @bind-Value="model.ConfirmPassword" class="form-control" type="password" placeholder="Confirm Password" />
                                        <label for="confirmPassword">Confirm Password</label>
                                        <ValidationMessage For="@(() => model.ConfirmPassword)" />
                                    </div>
                                    <div class="col-12">
                                        <div class="d-grid my-3">
                                            <button class="btn btn-primary btn-lg" type="submit" disabled="@isLoading">
                                                @if (isLoading)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                }
                                                Reset Password
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    public class ResetPasswordModel
    {
        [Required]
        public string? Email { get; set; }

        [Required]
        public string? Token { get; set; }

        [Required(ErrorMessage = "Enter a new password")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string? Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage = "Passwords don't match")]
        public string? ConfirmPassword { get; set; }
    }

    private ResetPasswordModel model = new();
    private string? message;
    private bool isLoading = false;
    private bool isLoaded = false;

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        Token ??= query.Get("token");
        Email ??= query.Get("email");

        if (!string.IsNullOrEmpty(Token) && !string.IsNullOrEmpty(Email))
        {
            model.Token = Token;
            model.Email = Email;
            isLoaded = true;
        }
        else
        {
            message = "Error: Missing token or email parameter. Please use the link from your email.";
        }
    }

    private async Task HandleResetPassword()
    {
        isLoading = true;
        message = "";

        try
        {
            var response = await Http.PostAsJsonAsync("/api/reset-password", model);

            if (response.IsSuccessStatusCode)
            {
                message = "Your password has been reset successfully! Redirecting to login...";
                StateHasChanged();
                await Task.Delay(2000);
                Nav.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
            }
        }
        catch (Exception e)
        {
            message = $"Error: {e.Message}";
            await SendLogToDatabase.SendLogAsync(
                $"Error during ResetPassword {message}",
                e.StackTrace ?? "Unknow",
                e.Source ?? "Client/Login/HandleResetPassword",
                TypeOfLog.Error);

        }
        finally
        {
            isLoading = false;
        }
    }
}