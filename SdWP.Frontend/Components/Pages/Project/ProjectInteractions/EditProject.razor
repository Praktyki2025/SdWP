@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using SdWP.DTO.Requests
@using SdWP.DTO.Requests.ProjectRequests
@using SdWP.DTO.Responses
@using SdWP.Service.IServices
@inject ToastService ToastService
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IProjectService ProjectService

@page "/projects/edit"

@attribute [StreamRendering]
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Edit Project</PageTitle>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">@message</div>
    <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/projects")'>Back</button>
}
else
{
    <EditForm Model="project" OnValidSubmit="EditProjectToDbAsync" FormName="EditProjectForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="titleInput" class="form-label">Title</label>
            <InputText id="titleInput" class="form-control" @bind-Value="project.Title" placeholder="Title" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="descriptionInput" class="form-label">Description</label>
            <InputText id="descriptionInput" class="form-control" @bind-Value="project.Description" placeholder="Description" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Save</button>
    <button class="btn btn-secondary" type="button" @onclick='() => Navigation.NavigateTo("/projects")'>Cancel</button>
</EditForm>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? id { get; set; }
    private string message = string.Empty;
    private bool _initialized = false;

    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    private ProjectEditRequest project = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"PARAM id: {id}");
        if (string.IsNullOrEmpty(id))
        {
            message = "Provided id is empty.";
            return;
        }
        Guid guid = Guid.Empty;
        Guid.TryParse(id, out guid);

        if (guid == Guid.Empty)
        {
            message = "Provided id has wrong fromat.";
            return;
        }

        project.Id = guid;
        var loadedProject = await ProjectService.GetProjectAsync(guid);
        if (loadedProject.Success == true)
        {
            project = loadedProject.Data.MapToRequest();
        }
        else
        {
            message = loadedProject.Message ?? "Editing the project failed. Try again.";
        }

    }

    private async Task EditProjectToDbAsync()
    {
        var response = await ProjectService.EditProjectAsync(project);

        if (response != null && response.Success)
        {
            ToastService.Notify(new ToastMessage(ToastType.Success, response.Message));
            Navigation.NavigateTo("/projects");
        }
        else
        {
            message = response?.Message ?? "Editing the project failed. Try again.";
        }
    }

}
