@page "/projects/valuations"
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JS
@attribute [Authorize]

<h3 class="mb-4">Project Valuations</h3>

<div class="card shadow-sm">
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" placeholder="Search by title, "
                           @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
        </div>

        @if (filteredValuations == null)
        {
            <p><em>Loading data...</em></p>
        }
        else if (!filteredValuations.Any())
        {
            <p><em>No data found.</em></p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                           
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var valuation in filteredValuations)
                        {
                            <tr>
                                <td>@valuation.Title</td>
                                <div class="ma-5 p-2">
                                    <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#descCollapse">
                                        Description
                                    </button>
                                    <div class="collapse show" id="descCollapse">
                                        <TextAreaInput @bind-Value="@valuation.Description2" ReadOnly = "disabled" />
                                    </div>
                                </div>
                                <td class="text-center">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-cog"></i> Actions
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <a class="dropdown-item"  @onclick="() => EditValuation(valuation.Id)">
                                                    <i class="fas fa-edit me-2"></i>Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item"  @onclick="() => EditValuation2(valuation.Id)">
                                                    <i class="fas fa-edit me-2"></i>Add File
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item text-danger"  @onclick="() => DeleteValuation(valuation.Id)">
                                                    <i class="fas fa-trash-alt me-2"></i>Delete
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>          

<Modal @ref="modal" title="Edit Valuation" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <div class="d-grid gap-2 col-9 mx-auto mt-2">
            <div class="ma-5 p-2">
                <label class="form-label">Description</label>
                <TextAreaInput @bind-Value="@enteredText" />
            </div>
            <div class="ma-3 p-2">
                <label class="form-label">Quantity</label>
                <NumberInput TValue="decimal" @bind-Value="@amount7" />
            </div>
            <div class="ma-3 p-2">
                <label class="form-label">VALUATION </label> 
            </div>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Add Valuation Item</Button>

            <div class="ma-3 p-2">
                <label class="form-label">Unit Price</label>
                <NumberInput TValue="float" @bind-Value="@amount3" />
            </div>
            <div class="ma-3 p-2">
                <label class="form-label">Total Amount</label>
                <NumberInput TValue="decimal" @bind-Value="@amount8" />
            </div>
            <div class="ma-3 p-2">
                <label class="form-label">Recurrence Period</label>
                <NumberInput TValue="int" @bind-Value="@amount2" />
            </div>
            <div class="ma-3 p-2">
                <label class="form-label">Recurrence Unit</label>
                <TextInput @bind-Value="@enteredText2" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="OnSaveChangesClick">Save changes</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modal2" title="Add File" IsVerticallyCentered="true" IsScrollable="true">
    <BodyTemplate>
        <div style="margin-bottom: 20px; display: flex;">
            <div>select your files:</div>
            <InputFile OnChange="FileUpload" />
        </div>
        @if (!string.IsNullOrEmpty(FileName))
        {
            <div>
                <strong>File:</strong> @FileName<br />
                <strong>Type:</strong> @FileType<br />
                <strong>Size:</strong> @FileSize
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModal2Click">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="OnSaveChanges2Click">Save changes</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal modal;
    private Modal modal2;
    private string enteredText;
    private string enteredText2;
    private decimal amount7;
    private float amount3;
    private decimal amount8;
    private int amount2;
    public string FileName { get; set; } = "";
    public string FileType { get; set; } = "";
    public string FileSize { get; set; } = "";

    private List<ValuationModel> allValuations = new();
    private List<ValuationModel> filteredValuations;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            FilterValuations();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var valuationService = new ValuationService();
        allValuations = await valuationService.GetValuationsAsync();
        filteredValuations = allValuations;
    }

    private void FilterValuations()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredValuations = allValuations;
        }
        else
        {
            var term = searchTerm.ToLower().Trim();
            
                
        }
    }

    private async Task EditValuation(int valuationId)
    {
        var valuation = allValuations.FirstOrDefault(v => v.Id == valuationId);
        if (valuation != null)
        {
            enteredText2 = valuation.RecurrenceUnit;
            enteredText = valuation.Description;
            amount7 = valuation.Quantity;
            amount3 = valuation.UnitPrice;
            amount8 = valuation.TotalAmount;
            amount2 = valuation.RecurrencePeriod;
        }
        await modal.ShowAsync();
    }

    private async Task EditValuation2(int valuationId)
    {
        var valuation = allValuations.FirstOrDefault(e => e.Id == valuationId);
        await modal2.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnSaveChangesClick()
    {
        await modal.HideAsync();
    }

    private async Task OnHideModal2Click()
    {
        await modal2.HideAsync();
    }

    private async Task OnSaveChanges2Click()
    {
        await modal2.HideAsync();
    }

    public async Task FileUpload(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;
        if (browserFile != null)
        {
            FileName = browserFile.Name;
            FileType = browserFile.ContentType;
            FileSize = $"{browserFile.Size / 1024} KB";
        }
    }

    private void DeleteValuation(int valuationId)
    {
        Console.WriteLine($"Delete valuation ID: {valuationId}");
    }

    public class ValuationModel
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Description2 { get; set; }
        public decimal Quantity { get; set; }
        public float UnitPrice { get; set; }
        public decimal TotalAmount { get; set; }
        public int RecurrencePeriod { get; set; }
        public string RecurrenceUnit { get; set; }
    }

    public class ValuationService
    {
        private readonly List<ValuationModel> _valuations;

        public ValuationService()
        {
            _valuations = new List<ValuationModel>
            {
                new ValuationModel { Id = 1, Title = "Kowalski Sp. z o.o.",Description2 = "dsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwdddddddddddddddddddddddaaaaaaaaaaaaaaaaaaaaaaassssssssssssssssssddddddddddddddddddwwwwwwwwwwwwwwwww" },
                new ValuationModel { Id = 2, Title = "Nowak Services",Description2 = ""  },
                new ValuationModel { Id = 3, Title = "Anna Bąk",Description2 = ""  },
                new ValuationModel { Id = 4, Title = "Tech Solutions",Description2 = ""  },
                new ValuationModel { Id = 5, Title = "Global Trade",Description2 = ""  }
            };
        }

        public async Task<List<ValuationModel>> GetValuationsAsync()
        {
            return await Task.FromResult(_valuations);
        }
    }
}
