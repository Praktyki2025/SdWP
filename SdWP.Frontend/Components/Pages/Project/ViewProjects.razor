@page "/projects"
@rendermode InteractiveServer

@using ProjectInteractions
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<div class="d-flex justify-content-end mb-12">
    <Button Class="add-project-btn" Color="ButtonColor.Success" @onclick='() => NavigationManager.NavigateTo("/projects/add", true)'>Add project</Button>
</div>

<table id="projectsViewTable" class="display">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<!-- Delete Modal -->
<div class="modal fade" id="DeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                Are you sure?
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
            </div>

        </div>
    </div>
</div>

@code {
    [Inject] private ToastService ToastService { get; set; } = default!;
    private bool isAuthenticated;
    private ConfirmDialog dialog = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine($"Auth - {user.Identity.IsAuthenticated} Name: {user.Identity.Name}");
        if (!user.Identity.IsAuthenticated)
        {
            ToastService.Notify(new ToastMessage(ToastType.Warning, "You are not logged in."));
            NavigationManager.NavigateTo("/login");
            return;
        }
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeDataTable");
        }
    }
}
