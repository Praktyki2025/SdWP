@page "/projects"
@using SdWP.Data.Models
@using ProjectInteractions
@rendermode InteractiveServer

<h3 class="mb-4">Projects</h3>

<div class="card shadow-sm">
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" placeholder="Search by title or description..."
                           @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
            <div class="col-md-6 text-end">
                <Button Color="ButtonColor.Success" @onclick="NavigateAddProject">Add project</Button>
                <Button Color="ButtonColor.Success" @onclick="GenerateList">Generate list</Button>
            </div>
        </div>

        @if (filteredProjects == null)
        {
            <p><em>Loading data...</em></p>
        }
        else if (!filteredProjects.Any())
        {
            <p><em>No projects found.</em></p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th @onclick="SortByTitle" style="cursor:pointer">Title</th>
                            <th>Description</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var project in PagedProjects)
                        {
                            <tr @onclick="() => NavigateToValuations()" style="cursor:pointer;">
                                <td>@project.Title</td>
                                <td>@project.Description</td>
                                <td class="text-center" @onclick:stopPropagation>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-cog"></i> Actions
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <button class="dropdown-item" type="button" @onclick="NavigateToEdit" @onclick:stopPropagation>
                                                    <i class="fas fa-edit me-2"></i>Edit
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item text-danger" type="button" @onclick="DeleteProjectAsync" @onclick:stopPropagation>
                                                    <i class="fas fa-trash-alt me-2"></i>Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>    
        }
        <Pagination ActivePageNumber="@currentPageNumber"
                        TotalPages="@TotalPages"
                        PageChanged="OnPageChangedAsync" />
        <ConfirmDialog @ref="dialog" />
    </div>
</div>

@code {
    private List<Projects> AllProjects = new();
    private List<Projects> filteredProjects;
    private int currentPageNumber = 1;
    private int pageSize = 5;
    private bool sortAscending = true;
    private string _searchTerm = string.Empty;
	[Inject] protected NavigationManager Navigation { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private ConfirmDialog dialog = default!;

    protected override void OnInitialized()
    {
        AllProjects = ExampleDb.GetProjectsAsList();
        filteredProjects = AllProjects;
    }

    private async Task DeleteProjectAsync()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", 321); // 321 => search Project by ID to delete

        var confirmation = await dialog.ShowAsync<ProjectDemoComponent>("Are you sure you want to delete this project?", parameters);
        Console.WriteLine(confirmation);
        if (confirmation)
        {
            // call API to delete the project
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Project deleted successfully."));
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));
        }
    }

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            FilterProjects();
        }
    }

    private IEnumerable<Projects> PagedProjects =>
        (sortAscending
            ? filteredProjects.OrderBy(p => p.Title)
            : filteredProjects.OrderByDescending(p => p.Title))
        .Skip((currentPageNumber - 1) * pageSize)
        .Take(pageSize);

    private int TotalPages => (int)Math.Ceiling((double)(filteredProjects?.Count ?? 0) / pageSize);

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; });
    }

    private void SortByTitle()
    {
        sortAscending = !sortAscending;
        currentPageNumber = 1;
    }

    private void NavigateAddProject()
    {
        Navigation.NavigateTo("/addproject");
    }

    private void GenerateList()
    {
        ExampleDb.GenerateList();
        AllProjects = ExampleDb.GetProjectsAsList();
        FilterProjects();
        StateHasChanged();
    }

    private void FilterProjects()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProjects = AllProjects;
        }
        else
        {
            var term = searchTerm.ToLower().Trim();
            filteredProjects = AllProjects
                .Where(p =>
                    (p.Title?.ToLower().Contains(term) ?? false) ||
                    (p.Description?.ToLower().Contains(term) ?? false)
                ).ToList();
        }
        currentPageNumber = 1;
    }

    private void NavigateToValuations()
    {
        Navigation.NavigateTo("/valuations");
    }

    private void NavigateToEdit()
    {
        Navigation.NavigateTo("/edit");
    }
}
