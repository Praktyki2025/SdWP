@using System.Text.Json
@using Microsoft.AspNetCore.Identity
@using SdWP.DTO.Requests
@using SdWP.DTO.Responses
@using SdWP.Service.IServices
@inject IUserService _userService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject ToastService ToastService
@inject IJSRuntime JS

@page "/user/changepassword"

<EditForm Model="changePasswordRequest" OnValidSubmit="Validate" FormName="AddProjectForm">
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-danger" role="alert" style="white-space: pre-line;">
            @message
        </div>
    }
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />
    <div class="row mb-3">
        <div class="col-md-12">
            <label for="titleInput" class="form-label">Previous password</label>
            <InputText id="PreviousPassword" class="form-control" @bind-Value="changePasswordRequest.PreviousPassword" placeholder="Previous password" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label for="descriptionInput" class="form-label">New password</label>
            <InputText id="newPassword" class="form-control" @bind-Value="changePasswordRequest.NewPassword" placeholder="New password" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label for="descriptionInput" class="form-label">Confrim new password</label>
            <InputText id="newPasswordConfirmation" class="form-control" @bind-Value="changePasswordRequest.ConfirmPassword" placeholder="Confirm" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Save</button>
    <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
</EditForm>


@code
{
    private string message = string.Empty;
    ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest();

    private async Task Cancel()
    {
        message = string.Empty;
        changePasswordRequest = new ChangePasswordRequest();
        Navigation.NavigateTo("/projects");
    }

    public async Task Validate()
    {
        var result = await _userService.ChangePasswordAsync(changePasswordRequest);

        if(result.Success)
        {
            ToastService.Notify(new ToastMessage(ToastType.Success, result.Message ?? "Password changed successfully"));
            Navigation.NavigateTo("/projects");
            return;
        }

        if(result.Errors == null || result.Errors.Count == 0)
        {
            message = result.Message ?? "An error occurred while changing the password.";
        }
        else
        {
            string mergederrors = string.Empty;
            foreach (var error in result.Errors)
            {
                mergederrors += $"{error}{Environment.NewLine}";
            }
            message = mergederrors;
        }
    }
}